# This flows creates PR using *strategic merge patch strategy* for public images
name: basic-gitops
on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Existing argo application name'
        required: true
      app_port:
        description: 'Port number, eg: 80'
        required: true
        default: '80'
      tag:
        description: 'Image tag to use, eg: 1.4'
        default: 'latest'
        required: true
      image:
        description: 'Image to use, eg: docker.io/nginx'
        default: 'docker.io/nginx'
        required: true
env:
  cluster-name: "ci-cluster"
  timeout: "120s"
jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Wrap Input
        run: |
          echo "PORT=${{ github.event.inputs.app_port }}" >> $GITHUB_ENV
          echo "APP=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "IMAGE=${{ github.event.inputs.image }}" >> $GITHUB_ENV
          echo "DEPLOY_FILE_PATH=apps/${{ github.event.inputs.app_name }}/deployment.yaml" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: "Start k3d"
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: ${{ env.cluster-name }}
          args: >-
            --agents 1
            --config=.github/workflows/assets/1.yaml
      - name: Wait for cluster to finish bootstraping
        run: |
          kubectl config set-context ${{ env.cluster-name }} --namespace default
          kubectl cluster-info
      - name: Install new deployment under test
        run: |
          kubectl create ns ci
          kubectl create deployment "${{ env.APP }}" \
            --image "${{ env.IMAGE }}:${{ env.TAG }}" \
            --port "${{ env.PORT }}" --dry-run=client -o yaml | kubectl apply -n ci -f -
      - name: Test all pods are ready
        id: test-result
        run: |
           kubectl wait --for=condition=Ready pods --all -n ci --timeout=${{ env.timeout }}
  create-pr:
    runs-on: ubuntu-latest
    if: always()
    needs: ci
    steps:
      - name: Mark the job as a failure
        if: needs.ci-kind.result != 'success'
        run: exit 1
      - name: Wrap Input
        run: |
          echo "PORT=${{ github.event.inputs.app_port }}" >> $GITHUB_ENV
          echo "APP=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "IMAGE=${{ github.event.inputs.image }}" >> $GITHUB_ENV
          echo "DEPLOY_FILE_PATH=apps/${{ github.event.inputs.app_name }}/deployment.yaml" >> $GITHUB_ENV
      - name: Generate deployment manifest
        if: needs.ci.result == 'success'
        run: |
          kubectl patch --type merge \
            --filename=${{ env.DEPLOY_FILE_PATH }} \
            --patch='{"spec":{"template":{"spec":{"containers":[{"name":"${{ env.APP }}","image":"${{ env.IMAGE }}","ports":[{"containerPort":"${{ env.PORT }}"}]}]}}}}' \
            --local=true --dry-run=client -o yaml > tmp.yaml
      - name: Commit change
        if: needs.ci.result == 'success'
        run: |
            git config user.name ${{ github.actor }}
            git config user.email '${{ github.actor }}@users.noreply.github.com'
            mv -f tmp.yaml ${{ env.DEPLOY_FILE_PATH }}
            git add ${{ env.DEPLOY_FILE_PATH }}
            git diff-index --quiet HEAD || git commit -m "Set ${{ env.APP }} to version ${{ env.TAG_NAME }}"
      - name: Create Pull Request
        if: needs.ci-kind.result == 'success'
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Update report
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: new_release_${{ env.APP }}-${{ env.TAG_NAME }}
          title: 'Set ${{ env.APP }} to version ${{ env.TAG_NAME }}'
          body: |
            This PR was automatically created.
            Please review and merge to deploy ${{ env.IMAGE }}.
