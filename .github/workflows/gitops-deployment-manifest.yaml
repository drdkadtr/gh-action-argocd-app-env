# This GH flow creates new PR with deployment patch using *strategic merge patch strategy*.
# Uses k3d.io to generate deployment manifest.
name: gitops-deployment-manifest
on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Deployment name'
        required: true
      app_port:
        description: 'Port number, eg: 80'
        required: true
        default: '80'
      tag:
        description: 'Image tag to use, eg: 1.4'
        default: 'latest'
        required: true
      image:
        description: 'Image to use, eg: docker.io/nginx'
        default: 'docker.io/nginx'
        required: true
jobs:
  ci:
    runs-on: ubuntu-latest
    outputs: # declare what this job outputs (so it can be re-used for other jobs)
      PORT: ${{ github.event.inputs.app_port }}
      APP: ${{ github.event.inputs.app_name }}
      TAG: ${{ github.event.inputs.tag }}
      IMAGE: ${{ github.event.inputs.image }}
    env:
      cluster-name: "ci-cluster"
      timeout: "120s"
      ns: 'ci'
    steps:
      - name: Wrap Input
        run: |
          echo "PORT=${{ github.event.inputs.app_port }}" >> $GITHUB_ENV
          echo "APP=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "IMAGE=${{ github.event.inputs.image }}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: "Start k3d"
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: ${{ env.cluster-name }}
          args: >-
            --agents 1
            --config=.github/workflows/assets/1.yaml
      - name: Wait for cluster to finish bootstraping
        run: |
          kubectl config set-context ${{ env.cluster-name }} --namespace default
          kubectl cluster-info
      - name: Install new deployment under test
        run: |
          kubectl create ns ${{ env.ns }}
          kubectl create deployment "${{ env.APP }}" \
            --image "${{ env.IMAGE }}:${{ env.TAG }}" \
            --port "${{ env.PORT }}" --dry-run=client -o yaml | kubectl apply -n ${{ env.ns }} -f -
      - name: Test all pods are ready
        run: |
           kubectl wait --for=condition=Ready pods --all -n ${{ env.ns }} --timeout=${{ env.timeout }}
  create-pr:
    runs-on: ubuntu-latest
    if: needs.ci.result == 'success'
    needs: ci
    env:
      PORT: ${{ needs.ci.outputs.PORT }}
      APP: ${{ needs.ci.outputs.APP }}
      TAG: ${{ needs.ci.outputs.TAG }}
      IMAGE: ${{ needs.ci.outputs.IMAGE }}
    steps:
      - name: Wrap Input
        run: |
          echo "ARGO_APPLICATIONS_FILE_DIR=applications/${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
          echo "DEPLOY_FILE_DIR=apps/${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
          echo "DEPLOY_FILE_PATH=apps/${{ github.event.inputs.app_name }}/deployment.yaml" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Generate deployment manifest
        run: >
          if [[ ! -f "${{ env.DEPLOY_FILE_PATH }}" ]]; then
               
               mkdir -p "${{ env.DEPLOY_FILE_DIR }}" "${{ env.ARGO_APPLICATIONS_FILE_DIR }}"
               
               ./githhub/gen-argo-applications.sh "{{ env.ARGO_APPLICATIONS_FILE_DIR }}/application.yaml" \
                "${{ env.APP }}-application" \
                "https://github.com/${{ env.GITHUB_REPOSITORY }}.git" \
                "${{ env.ARGO_APPLICATIONS_FILE_DIR }}" \
                "${{ env.APP }}"

               git add "${{ env.ARGO_APPLICATIONS_FILE_DIR }}/application.yaml"

               kubectl create deployment "${{ env.TAG }}" \
                --image "${{ env.IMAGE }}:${{ env.TAG }}" \
                --port "${{ env.PORT }}" --dry-run=client -o yaml|grep -v status > tmp.yaml
              
              echo "::set-output create-new=true"
          else
            # strategic patch merge:
            kubectl patch --type merge \
              --filename=${{ env.DEPLOY_FILE_PATH }} \
              --patch='{"spec":{"template":{"spec":{"containers":[{"name":"${{ env.APP }}","image":"${{ env.IMAGE }}","ports":[{"containerPort":"${{ env.PORT }}"}]}]}}}}' \
              --local=true --dry-run=client -o yaml > tmp.yaml
              
              echo "::set-output create-new=false"
          fi
      - name: Commit change
        run: |
            git config user.name ${{ github.actor }}
            git config user.email '${{ github.actor }}@users.noreply.github.com'
            mv -f tmp.yaml ${{ env.DEPLOY_FILE_PATH }}
            git add ${{ env.DEPLOY_FILE_PATH }}
            git diff-index --quiet HEAD || git commit -m "Set: ${{ env.APP }} to version: ${{ env.TAG }}"
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Update report
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: new_release_${{ env.APP }}-${{ env.TAG }}
          title: 'Set: ${{ env.APP }} to version: ${{ env.IMAGE }}:${{ env.TAG }}'
          body: |
            This PR was automatically created.
            Please review and merge to deploy ${{ env.IMAGE }}.
